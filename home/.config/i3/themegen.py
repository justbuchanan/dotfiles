#!/usr/bin/env python3

import sys
import colorsys
from colorz import colorz

WALLPAPER = sys.argv[1]


def normalize(hexv, minv=128, maxv=256):
    hexv = hexv[1]
    r, g, b = (hexv[0] / 256.0, hexv[1] / 256.0, hexv[2] / 256.0,)
    h, s, v = colorsys.rgb_to_hsv(r, g, b)
    minv = minv / 256.0
    maxv = maxv / 256.0
    if v < minv:
        v = minv
    if v > maxv:
        v = maxv
    r, g, b = colorsys.hsv_to_rgb(h, s, v)
    return '#{:02x}{:02x}{:02x}'.format(
        int(r * 256), int(g * 256), int(b * 256))


if __name__ == '__main__':
    if len(sys.argv) == 2:
        n = 16
    else:
        n = int(sys.argv[2])

    i = 0
    cz = colorz(WALLPAPER, n=n)

    def tpl2hex(tpl):
        # print(tpl)
        return '#%02x%02x%02x' % (tpl[0], tpl[1], tpl[2])

    palette = [(tpl2hex(tpl[0]), tpl2hex(tpl[1])) for tpl in cz]

    theme = dict(meta=dict(description='Autogenerated theme'))
    theme['colors'] = {}

    i = 0
    for pair in palette:
        for j in range(2):
            name = "color%d%d" % (i, j)
            theme['colors'][name] = tpl2hex(c[j])
        i += 1

    # hard-coded for n = 5
    use_mapping = dict(urgent='color41', focused='color00',)

    import yaml
    with open('out.yml', 'w') as outfile:
        yaml.dump(theme, outfile, default_flow_style=False)
    # print(output)
